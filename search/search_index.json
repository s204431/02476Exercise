{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#documentation","title":"Documentation","text":"<p>Documentation for exercise</p>"},{"location":"data/","title":"Data","text":""},{"location":"data/#exercise.data.normalize","title":"<code>exercise.data.normalize(images: torch.Tensor) -&gt; torch.Tensor</code>","text":"<p>Normalize images.</p> <p>Parameters:</p> Name Type Description Default <code>images</code> <code>Tensor</code> <p>Input images as a tensor.</p> required <p>Returns     output images after normalizing as a tensor.</p> Source code in <code>src/exercise/data.py</code> <pre><code>def normalize(images: torch.Tensor) -&gt; torch.Tensor:\n    \"\"\"Normalize images.\n\n    Args:\n        images: Input images as a tensor.\n\n    Returns\n        output images after normalizing as a tensor.\n\n    \"\"\"\n    return (images - images.mean()) / images.std()\n</code></pre>"},{"location":"data/#exercise.data.preprocess_data","title":"<code>exercise.data.preprocess_data(raw_dir: str, processed_dir: str) -&gt; None</code>","text":"<p>Process raw data and save it to processed directory.</p> Source code in <code>src/exercise/data.py</code> <pre><code>def preprocess_data(raw_dir: str, processed_dir: str) -&gt; None:\n    \"\"\"Process raw data and save it to processed directory.\"\"\"\n    train_images, train_target = [], []\n    for i in range(6):\n        train_images.append(torch.load(f\"{raw_dir}/train_images_{i}.pt\"))\n        train_target.append(torch.load(f\"{raw_dir}/train_target_{i}.pt\"))\n    train_images = torch.cat(train_images)\n    train_target = torch.cat(train_target)\n\n    test_images: torch.Tensor = torch.load(f\"{raw_dir}/test_images.pt\")\n    test_target: torch.Tensor = torch.load(f\"{raw_dir}/test_target.pt\")\n\n    train_images = train_images.unsqueeze(1).float()\n    test_images = test_images.unsqueeze(1).float()\n    train_target = train_target.long()\n    test_target = test_target.long()\n\n    train_images = normalize(train_images)\n    test_images = normalize(test_images)\n\n    torch.save(train_images, f\"{processed_dir}/train_images.pt\")\n    torch.save(train_target, f\"{processed_dir}/train_target.pt\")\n    torch.save(test_images, f\"{processed_dir}/test_images.pt\")\n    torch.save(test_target, f\"{processed_dir}/test_target.pt\")\n</code></pre>"},{"location":"data/#exercise.data.corrupt_mnist","title":"<code>exercise.data.corrupt_mnist(testing=False) -&gt; tuple[torch.utils.data.Dataset, torch.utils.data.Dataset]</code>","text":"<p>Return train and test datasets for corrupt MNIST.</p> Source code in <code>src/exercise/data.py</code> <pre><code>def corrupt_mnist(testing=False) -&gt; tuple[torch.utils.data.Dataset, torch.utils.data.Dataset]:\n    \"\"\"Return train and test datasets for corrupt MNIST.\"\"\"\n    if testing:\n        path = Path(os.getcwd()).absolute()\n    else:\n        path = Path(os.getcwd()).parent.parent.parent.absolute()\n    train_images = torch.load(f\"{path}/data/processed/train_images.pt\")\n    train_target = torch.load(f\"{path}/data/processed/train_target.pt\")\n    test_images = torch.load(f\"{path}/data/processed/test_images.pt\")\n    test_target = torch.load(f\"{path}/data/processed/test_target.pt\")\n\n    train_set = torch.utils.data.TensorDataset(train_images, train_target)\n    test_set = torch.utils.data.TensorDataset(test_images, test_target)\n    return train_set, test_set\n</code></pre>"}]}